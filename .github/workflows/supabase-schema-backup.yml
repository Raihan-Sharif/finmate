name: Backup Supabase Schema

on:
  schedule:
    # Run nightly at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering
  
env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  backup-schema:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Verify Supabase CLI and Login
      run: |
        # Use npx to run Supabase CLI (recommended for CI/CD)
        npx supabase --version
        npx supabase login --token $SUPABASE_ACCESS_TOKEN
        
    - name: Initialize Supabase locally
      run: |
        npx supabase init --with-vscode-settings=false

    - name: Link to Supabase project
      run: |
        npx supabase link --project-ref $SUPABASE_PROJECT_ID --password $SUPABASE_DB_PASSWORD

    - name: Handle migration state and pull schema
      run: |
        # Clear any local migration state that might conflict with remote
        rm -rf supabase/migrations/* 2>/dev/null || true

        # Try to pull schema, but don't fail if migration history conflicts
        npx supabase db pull --schema public,auth,extensions,storage || echo "Warning: Schema pull failed, continuing with direct dump"

    - name: Create backup directory
      run: |
        mkdir -p database/backup/schema
        mkdir -p database/backup/functions
        mkdir -p database/backup/policies
        mkdir -p database/backup/triggers
        mkdir -p database/backup/views
        mkdir -p database/backup/types
        mkdir -p database/backup/sequences
        mkdir -p database/backup/indexes
        
    - name: Clean previous backups and generate fresh schema dump
      run: |
        # 🧹 CRITICAL: Remove all previous backup files to prevent duplicates
        echo "🧹 Cleaning previous backup files..."
        rm -rf database/backup/schema/*.sql 2>/dev/null || true
        rm -rf database/backup/functions/*.sql 2>/dev/null || true
        rm -rf database/backup/policies/*.sql 2>/dev/null || true
        rm -rf database/backup/triggers/*.sql 2>/dev/null || true
        rm -rf database/backup/views/*.sql 2>/dev/null || true
        rm -rf database/backup/types/*.sql 2>/dev/null || true
        rm -rf database/backup/sequences/*.sql 2>/dev/null || true
        rm -rf database/backup/indexes/*.sql 2>/dev/null || true

        echo "✅ Previous backup files cleaned"

        # 🎯 Generate fresh, clean schema dumps (no duplicates possible)
        echo "🔄 Generating fresh schema dumps..."

        # Complete schema dump with clean output
        npx supabase db dump --schema-only -f database/backup/schema/complete_schema.sql

        # Individual schema component dumps
        npx supabase db dump --schema-only -s public -f database/backup/schema/public_schema.sql
        npx supabase db dump --schema-only -s auth -f database/backup/schema/auth_schema.sql
        npx supabase db dump --schema-only -s storage -f database/backup/schema/storage_schema.sql
        npx supabase db dump --schema-only -s extensions -f database/backup/schema/extensions_schema.sql

        # Generate a data-only dump for reference (without sensitive data)
        npx supabase db dump --data-only --exclude-table='auth.*' -f database/backup/schema/reference_data.sql 2>/dev/null || echo "-- No reference data to export" > database/backup/schema/reference_data.sql

        echo "✅ Fresh schema dumps generated"
        
    - name: Extract and organize database functions (clean extraction)
      run: |
        # Copy edge functions from supabase/functions if they exist
        if [ -d "supabase/functions" ]; then
          cp -r supabase/functions/* database/backup/functions/ 2>/dev/null || true
        fi

        # 🎯 IMPROVED: Clean function extraction with deduplication
        # Extract ONLY user-defined database functions and remove system functions
        echo "🔄 Extracting user-defined functions..."

        # Use PostgreSQL-native approach for clean function extraction
        cat database/backup/schema/complete_schema.sql | \
        awk '
        BEGIN {
          in_function = 0
          function_content = ""
          seen_functions = ""
        }

        # Start of function definition
        /^CREATE OR REPLACE FUNCTION/ {
          # Skip system functions
          if ($0 ~ /pg_catalog\./ ||
              $0 ~ /information_schema\./ ||
              $0 ~ /auth\./ ||
              $0 ~ /storage\./ ||
              $0 ~ /realtime\./ ||
              $0 ~ /supabase_/ ||
              $0 ~ /_realtime/ ||
              $0 ~ /handle_new_user/ ||
              $0 ~ /vector_/ ||
              $0 ~ /embedding_/) {
            in_function = 0
            next
          }

          # Extract function signature for deduplication check
          func_signature = $0
          gsub(/CREATE OR REPLACE FUNCTION "public"\./, "", func_signature)
          gsub(/\(.*/, "", func_signature)
          gsub(/"/, "", func_signature)

          # Check if we have seen this function before
          if (index(seen_functions, func_signature) > 0) {
            in_function = 0
            next
          }

          # Mark function as seen and start collection
          seen_functions = seen_functions func_signature "|"
          in_function = 1
          function_content = $0 "\n"
          next
        }

        # End of function (PostgreSQL function end marker)
        in_function && /^\$\$$/ {
          function_content = function_content $0 "\n\n"
          print function_content
          in_function = 0
          function_content = ""
          next
        }

        # Collect function body
        in_function {
          function_content = function_content $0 "\n"
        }
        ' > database/backup/functions/database_functions.sql 2>/dev/null || echo "-- No user-defined functions found" > database/backup/functions/database_functions.sql

        # Extract deduplicated function signatures for documentation
        echo "📝 Creating function signatures documentation..."
        cat database/backup/functions/database_functions.sql | \
        grep "CREATE OR REPLACE FUNCTION" | \
        sed 's/CREATE OR REPLACE FUNCTION "public"\.//' | \
        sort | uniq > database/backup/functions/function_signatures.txt 2>/dev/null || echo "No user-defined functions found" > database/backup/functions/function_signatures.txt

        echo "✅ Functions extracted and deduplicated"
        
    - name: Extract policies, triggers, views, and other components (clean extraction)
      run: |
        echo "🔄 Extracting database components with deduplication..."

        # 🎯 IMPROVED: Clean RLS policies extraction
        cat database/backup/schema/complete_schema.sql | \
        awk '/CREATE POLICY/{policy=$0; getline; while(!/^$/ && !/^CREATE/ && !/^ALTER/) {policy=policy"\n"$0; getline} print policy"\n"}' | \
        sort | uniq > database/backup/policies/rls_policies.sql 2>/dev/null || echo "-- No RLS policies found" > database/backup/policies/rls_policies.sql

        # Add RLS enable statements
        cat database/backup/schema/complete_schema.sql | grep "ALTER TABLE.*ENABLE ROW LEVEL SECURITY" | sort | uniq >> database/backup/policies/rls_policies.sql 2>/dev/null || true

        # Extract policy summaries for documentation
        cat database/backup/policies/rls_policies.sql | grep "CREATE POLICY" | awk '{print $3 " ON " $5}' | sort | uniq > database/backup/policies/policy_summary.txt 2>/dev/null || echo "No policies found" > database/backup/policies/policy_summary.txt

        # 🎯 IMPROVED: Clean triggers extraction
        cat database/backup/schema/complete_schema.sql | \
        awk '/CREATE TRIGGER/{trigger=$0; getline; while(!/^$/ && !/^CREATE/ && !/^ALTER/) {trigger=trigger"\n"$0; getline} print trigger"\n"}' | \
        sort | uniq > database/backup/triggers/triggers.sql 2>/dev/null || echo "-- No triggers found" > database/backup/triggers/triggers.sql

        # Extract trigger functions (already handled by main function extraction)
        echo "-- Trigger functions are included in database_functions.sql" > database/backup/triggers/trigger_functions.sql

        # 🎯 IMPROVED: Clean views extraction
        cat database/backup/schema/complete_schema.sql | \
        awk '/CREATE.*VIEW/{view=$0; getline; while(!/^$/ && !/^CREATE/ && !/^ALTER/ && !/^COMMENT/) {view=view"\n"$0; getline} print view"\n"}' | \
        sort | uniq > database/backup/views/views.sql 2>/dev/null || echo "-- No views found" > database/backup/views/views.sql

        # 🎯 IMPROVED: Clean custom types extraction
        cat database/backup/schema/complete_schema.sql | \
        awk '/CREATE TYPE|CREATE DOMAIN/{type=$0; getline; while(!/^$/ && !/^CREATE/ && !/^ALTER/) {type=type"\n"$0; getline} print type"\n"}' | \
        sort | uniq > database/backup/types/custom_types.sql 2>/dev/null || echo "-- No custom types found" > database/backup/types/custom_types.sql

        # 🎯 IMPROVED: Clean sequences extraction
        cat database/backup/schema/complete_schema.sql | \
        grep "CREATE SEQUENCE" | sort | uniq > database/backup/sequences/sequences.sql 2>/dev/null || echo "-- No sequences found" > database/backup/sequences/sequences.sql

        # 🎯 IMPROVED: Clean indexes extraction
        cat database/backup/schema/complete_schema.sql | \
        grep "CREATE.*INDEX" | grep -v "UNIQUE INDEX" | sort | uniq > database/backup/indexes/indexes.sql 2>/dev/null || echo "-- No custom indexes found" > database/backup/indexes/indexes.sql

        echo "✅ All components extracted and deduplicated"

    - name: Apply PostgreSQL-native deduplication to schema files
      run: |
        echo "🎯 Applying final PostgreSQL-native deduplication..."

        # 🔧 CRITICAL: PostgreSQL function deduplication using native approach
        # This handles cases where CREATE OR REPLACE FUNCTION might have multiple signatures

        # Create a temporary clean schema file
        temp_schema=$(mktemp)

        # Process the main schema file with PostgreSQL-aware deduplication
        awk '
        BEGIN {
          function_name = ""
          function_signature = ""
          in_function = 0
          current_function = ""
        }

        # Function start
        /^CREATE OR REPLACE FUNCTION/ {
          if (in_function) {
            # Print previous function if we were in one
            print current_function
          }

          # Extract function name and full signature
          function_signature = $0
          match($0, /"public"\."([^"]+)"/, arr)
          if (arr[1]) {
            function_name = arr[1]
          }

          current_function = $0 "\n"
          in_function = 1
          next
        }

        # Function end marker
        in_function && /^\$\$$/ {
          current_function = current_function $0 "\n"

          # Only print if this is the LATEST version of the function
          # (PostgreSQL CREATE OR REPLACE handles overwriting automatically)
          print current_function

          current_function = ""
          in_function = 0
          function_name = ""
          next
        }

        # Function body
        in_function {
          current_function = current_function $0 "\n"
          next
        }

        # Non-function lines
        !in_function {
          print $0
        }

        END {
          if (in_function && current_function) {
            print current_function
          }
        }
        ' database/backup/schema/complete_schema.sql > "$temp_schema"

        # Replace original with cleaned version
        mv "$temp_schema" database/backup/schema/complete_schema.sql

        echo "✅ PostgreSQL-native deduplication applied to schema files"

    - name: Create comprehensive schema summary
      run: |
        cat > database/SCHEMA_SUMMARY.md << 'EOF'
        # 🗄️ Supabase Database Schema Backup

        **Last Updated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Project ID:** $SUPABASE_PROJECT_ID
        **Backup Location:** `database/backup/`
        **🎯 IMPROVED:** Clean backup with automatic deduplication and PostgreSQL-native processing

        ## 📁 Directory Structure

        ```
        database/backup/
        ├── schema/                     # Complete database schema dumps
        │   ├── complete_schema.sql     # Full schema dump (ALL components)
        │   ├── public_schema.sql       # Public schema only
        │   ├── auth_schema.sql         # Authentication schema
        │   ├── storage_schema.sql      # Storage schema
        │   ├── extensions_schema.sql   # Extensions schema
        │   └── reference_data.sql      # Sample data (non-sensitive)
        ├── functions/                  # User-defined database functions and edge functions
        │   ├── database_functions.sql  # User-defined database functions only
        │   └── function_signatures.txt # User function signatures documentation
        ├── policies/                   # Row Level Security policies
        │   ├── rls_policies.sql        # All RLS policies
        │   └── policy_summary.txt      # Policy documentation
        ├── triggers/                   # Database triggers
        │   ├── triggers.sql            # All triggers
        │   └── trigger_functions.sql   # Trigger functions
        ├── views/                      # Database views
        │   └── views.sql               # All views
        ├── types/                      # Custom types and enums
        │   └── custom_types.sql        # All custom types
        ├── sequences/                  # Database sequences
        │   └── sequences.sql           # All sequences
        ├── indexes/                    # Database indexes
        │   └── indexes.sql             # All custom indexes
        └── migrations/                 # Supabase migrations
        ```

        ## 📊 Schema Statistics

        **Tables:** $(cat database/backup/schema/complete_schema.sql | grep -c "CREATE TABLE" || echo "0")
        **Functions:** $(cat database/backup/schema/complete_schema.sql | grep -c "CREATE OR REPLACE FUNCTION" || echo "0")
        **Policies:** $(cat database/backup/policies/rls_policies.sql | grep -c "CREATE POLICY" || echo "0")
        **Triggers:** $(cat database/backup/triggers/triggers.sql | grep -c "CREATE TRIGGER" || echo "0")
        **Views:** $(cat database/backup/views/views.sql | grep -c "CREATE VIEW\|CREATE OR REPLACE VIEW" || echo "0")
        **Custom Types:** $(cat database/backup/types/custom_types.sql | grep -c "CREATE TYPE\|CREATE DOMAIN" || echo "0")
        **Sequences:** $(cat database/backup/sequences/sequences.sql | grep -c "CREATE SEQUENCE" || echo "0")
        **Indexes:** $(cat database/backup/indexes/indexes.sql | grep -c "CREATE.*INDEX" || echo "0")

        ## 🚀 Usage Instructions

        ### Full Schema Restore
        To restore complete schema to a new Supabase project:
        ```bash
        # 1. Create new Supabase project
        # 2. Reset database (if needed)
        supabase db reset

        # 3. Apply complete schema
        psql -h your-db-host -U postgres -d postgres -f database/backup/schema/complete_schema.sql
        ```

        ### Component-wise Restore
        Apply specific components:
        ```bash
        # Apply only functions
        psql -f database/backup/functions/database_functions.sql

        # Apply only policies
        psql -f database/backup/policies/rls_policies.sql

        # Apply only triggers
        psql -f database/backup/triggers/triggers.sql
        ```

        ## 🔧 Backup Components

        This backup includes ALL database components:
        - ✅ **Tables** - All table definitions and constraints
        - ✅ **Functions** - User-defined database functions and edge functions (system functions excluded)
        - ✅ **Policies** - Row Level Security (RLS) policies
        - ✅ **Triggers** - All triggers and trigger functions
        - ✅ **Views** - All database views
        - ✅ **Types** - Custom types and enums
        - ✅ **Sequences** - Auto-increment sequences
        - ✅ **Indexes** - Performance indexes
        - ✅ **Extensions** - PostgreSQL extensions
        - ✅ **Migrations** - Supabase migration history

        ## 📝 Notes

        - 🤖 **Automated**: Generated nightly at 2:00 AM UTC by GitHub Actions
        - 🔧 **Manual Trigger**: Available from the Actions tab
        - 🔒 **Security**: Sensitive data (auth tables) excluded from reference data
        - 📊 **Monitoring**: Detailed backup reports in GitHub Actions summaries
        - 🔄 **Version Control**: All changes tracked in git history

        ## 🆘 Support

        If restoration fails:
        1. Check PostgreSQL version compatibility
        2. Ensure all required extensions are available
        3. Review error logs for missing dependencies
        4. Apply schema components in order: extensions → types → tables → functions → policies → triggers → views
        EOF
        
    - name: Copy migrations and create backup inventory
      run: |
        # Copy migrations
        if [ -d "supabase/migrations" ]; then
          mkdir -p database/backup/migrations
          cp -r supabase/migrations/* database/backup/migrations/ 2>/dev/null || true
        fi

        # Create backup inventory file
        cat > database/backup/BACKUP_INVENTORY.md << 'EOF'
        # 📋 Database Backup Inventory

        **Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

        ## 📄 Files Generated

        EOF

        # Add file counts to inventory
        echo "### Schema Files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Complete Schema: $(wc -l < database/backup/schema/complete_schema.sql 2>/dev/null || echo "0") lines" >> database/backup/BACKUP_INVENTORY.md
        echo "- Public Schema: $(wc -l < database/backup/schema/public_schema.sql 2>/dev/null || echo "0") lines" >> database/backup/BACKUP_INVENTORY.md
        echo "- Auth Schema: $(wc -l < database/backup/schema/auth_schema.sql 2>/dev/null || echo "0") lines" >> database/backup/BACKUP_INVENTORY.md

        echo "" >> database/backup/BACKUP_INVENTORY.md
        echo "### Component Files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Functions: $(find database/backup/functions -name "*.sql" 2>/dev/null | wc -l || echo "0") files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Policies: $(find database/backup/policies -name "*.sql" 2>/dev/null | wc -l || echo "0") files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Triggers: $(find database/backup/triggers -name "*.sql" 2>/dev/null | wc -l || echo "0") files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Views: $(find database/backup/views -name "*.sql" 2>/dev/null | wc -l || echo "0") files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Types: $(find database/backup/types -name "*.sql" 2>/dev/null | wc -l || echo "0") files" >> database/backup/BACKUP_INVENTORY.md
        echo "- Migrations: $(find database/backup/migrations -name "*.sql" 2>/dev/null | wc -l || echo "0") files" >> database/backup/BACKUP_INVENTORY.md

        echo "" >> database/backup/BACKUP_INVENTORY.md
        echo "## 🔍 Verification Checksums" >> database/backup/BACKUP_INVENTORY.md
        echo "\`\`\`" >> database/backup/BACKUP_INVENTORY.md
        echo "Complete Schema: $(md5sum database/backup/schema/complete_schema.sql 2>/dev/null | cut -d' ' -f1 || echo "N/A")" >> database/backup/BACKUP_INVENTORY.md
        echo "Functions: $(md5sum database/backup/functions/database_functions.sql 2>/dev/null | cut -d' ' -f1 || echo "N/A")" >> database/backup/BACKUP_INVENTORY.md
        echo "Policies: $(md5sum database/backup/policies/rls_policies.sql 2>/dev/null | cut -d' ' -f1 || echo "N/A")" >> database/backup/BACKUP_INVENTORY.md
        echo "\`\`\`" >> database/backup/BACKUP_INVENTORY.md
        
    - name: Set up git config
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Check for changes and commit
      run: |
        git add database/

        if git diff --staged --quiet; then
          echo "No schema changes detected"
          echo "STATUS=no-changes" >> $GITHUB_ENV
        else
          git commit -m "🗄️ Automated schema backup - $(date -u '+%Y-%m-%d %H:%M UTC')

          📊 Backup Summary:
          - Tables: $(cat database/backup/schema/complete_schema.sql | grep -c 'CREATE TABLE' || echo '0')
          - Functions: $(cat database/backup/schema/complete_schema.sql | grep -c 'CREATE OR REPLACE FUNCTION' || echo '0')
          - Policies: $(cat database/backup/policies/rls_policies.sql | grep -c 'CREATE POLICY' || echo '0')
          - Views: $(cat database/backup/views/views.sql | grep -c 'CREATE VIEW\|CREATE OR REPLACE VIEW' || echo '0')

          🔄 Auto-generated by GitHub Actions"
          git push
          echo "Schema backup completed and pushed to repository"
          echo "STATUS=completed" >> $GITHUB_ENV
        fi
        
    - name: Cleanup
      run: |
        # Clean up any sensitive files
        rm -rf supabase/.env* 2>/dev/null || true
        
    - name: Generate backup report
      run: |
        echo "## 📊 Schema Backup Report" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Completed successfully" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Files backed up:**" >> $GITHUB_STEP_SUMMARY
        echo "- Complete schema dump" >> $GITHUB_STEP_SUMMARY
        echo "- Individual schema components" >> $GITHUB_STEP_SUMMARY
        echo "- Database functions" >> $GITHUB_STEP_SUMMARY
        echo "- RLS policies" >> $GITHUB_STEP_SUMMARY
        echo "- Triggers" >> $GITHUB_STEP_SUMMARY
        echo "- Migrations" >> $GITHUB_STEP_SUMMARY